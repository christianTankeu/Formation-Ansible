# Author: Christian TANKEU
# Pseudo: GhostSecurity
# Email: tankeuchristian1@gmail.com

- name: TEST VARIABLE ENREGISTREE
  hosts: datacenter

  tasks:
    - name: Test des variable
      block:
        - name: Lister les fichers
          ansible.builtin.command:
            cmd: ls -l
          when:
            - ansible_facts['os_family'] == "Debian"
            - ansible_facts['lsb']['major_release'] == "19"
          register: list
        - name: Recuperer la liste des repertoires home
          ansible.builtin.command:
            cmd: ls /home
          changed_when: false
          register: home_dirs
        - name: Lister les repertoires home_dirs
          ansible.builtin.debug:
            msg: "{{ home_dirs.stdout_lines }}"
      when: ansible_facts['distribution'] == 'Ubuntu'
      rescue:
        - name: Afficher les erreurs
          ansible.builtin.debug:
            msg: "une erreur s'est produite"
        - name: lancer toujours les declencheurs
          ansible.builtin.meta:
            free_form: flush_handlers
- name: TEST VARIABLE
  hosts: webservers
  ignore_unreachable: true
  force_handlers: true
  any_errors_fatal: true

  vars:
    epic: true
    monumental: "yes"
    proxy_env:
      http_proxy: http://proxy.example.com:8080

  tasks:
    - name: Lancer la commande si epic ou monumental est vraie
      ansible.builtin.command:
        cmd: echo "C'est epic"
      when: epic or monumental | bool
      ignore_unreachable: false
      environment:
        http_proxy: "{{ http_proxy }}"
    - name: Lancer la commande si epic est faux
      ansible.builtin.command:
        cmd: echo "c'est pas epic"
      when: not epic
    - name: reactive hosts
      ansible.builtin.meta:
        free_form: clear_host_errors
      notify: restart web services

  handlers:
    - name: Restart memcached
      ansible.builtin.service:
        name: memcached
        state: restarted
      listen: "restart web services"
    - name: Restart apache
      ansible.builtin.service:
        name: apache
        state: restarted
      listen: "restart web services"
